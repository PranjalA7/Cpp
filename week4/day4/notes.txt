unordered_map : hash table based data container
map : trees based (usually self-balancing)
unordered_set : hash table
set : red black tree
multimap : used when multiple values have to be stored with same key attached to them
multiset : same as multi map. It gives a sorted storage if elements
eg 1, 10, 11, 10, 10, 7, 11  multiset: {1, 7, 10, 10, 11, 11}


what is web server , its working , try another web server 

create allocator malloc

*Set uses equivalence comparator not equality

composition inheritence stlalgorithm questions will need diagrams

FINAL MARATHON Priority queue


/////////////////////////////////////////////////////////////////

Data: representing employee Ids for various employee

e1              e2            e3           e4            e5
[101 | Harshit] [202 | Rohan] [103 | Ajay] [204 | Mehul] [105 | Mayank]

option1 : array
-fixed size container 
-memory has to be reserved before adding elements. 
-storage contiguous
-elements can be accessed via index
-constant time, add, remove, read, update using index

option2 : vector 
-we can increase the number of elements at any point
-storage is contiguous
-if there is no space available adjacent to current memory allocated, 
    all elements will be shifted
-adding elements at the end of the vector, accessing an element for read, updating
    can all be performed via index position in constant time
-memory can be reserved in advance in some implementation like STL

option3 : linked list
-data will be not be stored contiguously (not always atleast!)
-for each new element to be added, a new node of data is created by allocating memory
-since memory is not supposed to be contiguous, works well for large number of items
-operations have different time complexity (OBVIOUSLY)

option4a : hash table with key value pairs, only 1 value per key (unordered_map)
-hashing based on a hash function applied on keys determines bucket to store the value
-amortized cost of operations

option4b : hash table with key value pairs, multiple value per key (unordered_multimap)
-one key may be associated with multiple values
-amortized cost of operations

option5 : set with a custom comparison logic created via a comparator (std::set)
-duplicates will not be allowed
-duplication is determined using equivalence principle

option6 : data in a stack based on some type of container (std::stack)
-only one element will be available for operation (LIFO order)
-underlying implementation can be decided prior to instantiation of stack
-for each loop doesnt work with stack 


week 1
new keywords - default, delete, auto, nullptr, noexcept, final, 
override, using, constexpr, explicit, mutable
defaulted, deleted member functions
uniform initialisation 

func pointer 
function wrapper (type eraser)
std::ref 
reference_wrapper
std::bind

lambdas (creates a dummy class and overloads operator() it behaves as object)

week 2 functional programming

week 3
concurrency - threads, race conditon, mutex, lock guard, condition variable, unique lock, 
    std::async,  
cpp 17 - variant(holds_alternative, get), std::optional, 

structured binding 
if initialisation
copy_ellision